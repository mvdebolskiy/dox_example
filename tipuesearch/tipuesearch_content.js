var tipuesearch = {"pages":[{"title":" ","text":"Example for simple fortran documentation build with ford.\nRepo also has hello.sh script for bash scripts options and argument parsing to make a useful --help option Developer Info mvdebolskiy","tags":"home","loc":"index.html"},{"title":"mult_int – ","text":"public  function mult_int(a, b) Multiplies two integers Arguments Type Intent Optional Attributes Name integer, intent(in) :: a first term integer, intent(in) :: b second turn Return Value integer Called by proc~~mult_int~~CalledByGraph proc~mult_int mult_int program~hello_world hello_world program~hello_world->proc~mult_int Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/mult_int.html"},{"title":"say_hello – ","text":"subroutine say_hello(name) subroutine to say hello world Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Who to say hello to Called by proc~~say_hello~~CalledByGraph proc~say_hello say_hello program~hello_world hello_world program~hello_world->proc~say_hello Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/say_hello.html"},{"title":"mathmod – ","text":"module with math functions Used by module~~mathmod~~UsedByGraph module~mathmod mathmod program~hello_world hello_world program~hello_world->module~mathmod Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Functions public  function mult_int (a, b) Multiplies two integers Arguments Type Intent Optional Attributes Name integer, intent(in) :: a first term integer, intent(in) :: b second turn Return Value integer","tags":"","loc":"module/mathmod.html"},{"title":"hello_world – ","text":"Uses mathmod program~~hello_world~~UsesGraph program~hello_world hello_world module~mathmod mathmod program~hello_world->module~mathmod Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. This is hello_world program hello.f90 Note поддерживает много языков Calls program~~hello_world~~CallsGraph program~hello_world hello_world proc~mult_int mult_int program~hello_world->proc~mult_int proc~say_hello say_hello program~hello_world->proc~say_hello Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Variables Type Attributes Name Initial integer :: a integer :: b integer :: c Subroutines subroutine say_hello (name) subroutine to say hello world Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: name Who to say hello to","tags":"","loc":"program/hello_world.html"},{"title":"mathmod.f90 – ","text":"Files dependent on this one sourcefile~~mathmod.f90~~AfferentGraph sourcefile~mathmod.f90 mathmod.f90 sourcefile~helloworld.f90 helloworld.f90 sourcefile~helloworld.f90->sourcefile~mathmod.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module mathmod !! module with math functions implicit none contains integer function mult_int ( a , b ) !! Multiplies two integers a*b = c ! Arguments: integer , intent ( in ) :: a !! first term integer , intent ( in ) :: b !! second turn mult_int = a * b end function mult_int endmodule mathmod","tags":"","loc":"sourcefile/mathmod.f90.html"},{"title":"helloworld.f90 – ","text":"This file depends on sourcefile~~helloworld.f90~~EfferentGraph sourcefile~helloworld.f90 helloworld.f90 sourcefile~mathmod.f90 mathmod.f90 sourcefile~helloworld.f90->sourcefile~mathmod.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code program hello_world !! This is hello_world program `hello.f90` use mathmod implicit none !! @note !!  поддерживает много языков !! @endnote integer :: a , b , c ! This is just a normal comment call say_hello ( \"World!\" ) a = 10 b = 20 c = mult_int ( a , b ) contains subroutine say_hello ( name ) !! subroutine to say hello world character ( len =* ), intent ( in ) :: name !! Who to say hello to write ( * , '(\"Hello, \", a)' ) name end subroutine say_hello end program hello_world","tags":"","loc":"sourcefile/helloworld.f90.html"},{"title":"hello.sh – ","text":"Example script on how to use options and arguments in bash Note in example.md extra_filetypes: sh #! means you need #!! for ford to parse Source Code #!/bin/bash SCRIPT = $( basename \" $0 \" ) #!! Example script on how to use options and arguments in bash #!!@note #!! in example.md `extra_filetypes: sh #!` means you need `#!!` for ford to parse #!!@endnote # functions for output function help { echo \" $SCRIPT for saying hello to someone\" echo \"\" usage } function usage { local txt =( \"Usage: $SCRIPT [options] STRING1 STRING2 ... STRINGN\" \"\" \"Options:\" \"  --help, -h            Print help.\" \"  --who, -w             Who to say hello to\" \"  STRING1 ... STRINGN   any number of strings separated by space to print after hello\" \"\" \"  defaults are:\" \"  who = World\" ) printf \"%s\\n\" \" ${ txt [@] } \" } function badusage { local message = \" $1 \" local txt =( \"For overview  execute:\" \" $SCRIPT --help\" ) [[ $message ]] && printf \" $message \\n\" printf \"%s\\\\n\" \" ${ txt [@] } \" } #define vars who = \"\" #process arguments PARSEDARGS = $( getopt -o hw: --long help,who: -- \" $@ \" ) if [ \" $? \" ! = \"0\" ] ; then badusage fi eval set -- \" $PARSEDARGS \" # check for options and get all positional arguments into one big string. while true ; do case $1 in --help | -h ) help exit ;; --who | -w ) who = $2 ; shift 2 ;; -- ) posargs = $@ ; shift ; break ;; * ) badusage \" $1 \" ; shift ; exit ;; esac done # convert posargs into an array FS = ' ' read -r -a posargs <<< \" $posargs \" # pop the first element (--) posargs =( \" ${ posargs [@]: 1 } \" ) # Print when who is set to default if [[ -z \" $who \" ]] ; then echo echo \"Who is not defined\" echo \"\" echo \"\" echo \"Setting to default:\" who = \"World\" echo \"Hello ${ who } !!\" exit fi echo \"Hello ${ who } !!\" #Loop through strings and print them for str in \" ${ posargs [@] } \" do echo \" $str \" done","tags":"","loc":"sourcefile/hello.sh.html"}]}